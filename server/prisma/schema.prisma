generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin_user {
  admin_user_id Int       @id @default(autoincrement())
  uuid          String    @unique(map: "ADMIN_USER_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status        Boolean   @default(true)
  email         String    @unique(map: "ADMIN_USER_EMAIL_UNIQUE") @db.VarChar
  password      String    @db.VarChar
  full_name     String?   @db.VarChar
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
}

model attribute {
  attribute_id                                           Int                             @id @default(autoincrement())
  uuid                                                   String                          @unique(map: "ATTRIBUTE_CODE_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  attribute_code                                         String                          @unique(map: "ATTRIBUTE_CODE_UNIQUE") @db.VarChar
  attribute_name                                         String                          @db.VarChar
  type                                                   String                          @db.VarChar
  is_required                                            Boolean                         @default(false)
  display_on_frontend                                    Boolean                         @default(false)
  sort_order                                             Int                             @default(0)
  is_filterable                                          Boolean                         @default(false)
  attribute_group_link                                   attribute_group_link[]
  attribute_option                                       attribute_option[]
  product_attribute_value_index                          product_attribute_value_index[]
  variant_group_attributeTovariant_group_attribute_five  variant_group[]                 @relation("attributeTovariant_group_attribute_five")
  variant_group_attributeTovariant_group_attribute_four  variant_group[]                 @relation("attributeTovariant_group_attribute_four")
  variant_group_attributeTovariant_group_attribute_one   variant_group[]                 @relation("attributeTovariant_group_attribute_one")
  variant_group_attributeTovariant_group_attribute_three variant_group[]                 @relation("attributeTovariant_group_attribute_three")
  variant_group_attributeTovariant_group_attribute_two   variant_group[]                 @relation("attributeTovariant_group_attribute_two")
}

model attribute_group {
  attribute_group_id   Int                    @id @default(autoincrement())
  uuid                 String                 @unique(map: "ATTRIBUTE_GROUP_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  group_name           String
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @db.Timestamptz(6)
  attribute_group_link attribute_group_link[]
  product              product[]
  variant_group        variant_group[]
}

model attribute_group_link {
  attribute_group_link_id Int             @id @default(autoincrement())
  attribute_id            Int
  group_id                Int
  attribute               attribute       @relation(fields: [attribute_id], references: [attribute_id], onDelete: Cascade)
  attribute_group         attribute_group @relation(fields: [group_id], references: [attribute_group_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([attribute_id, group_id], map: "ATTRIBUTE_GROUP_LINK_UNIQUE")
  @@index([attribute_id], map: "FK_ATTRIBUTE_LINK")
  @@index([group_id], map: "FK_GROUP_LINK")
}

model attribute_option {
  attribute_option_id           Int                             @id @default(autoincrement())
  uuid                          String                          @unique(map: "ATTRIBUTE_OPTION_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  attribute_id                  Int
  attribute_code                String                          @db.VarChar
  option_text                   String                          @db.VarChar
  attribute                     attribute                       @relation(fields: [attribute_id], references: [attribute_id], onDelete: Cascade, onUpdate: NoAction)
  product_attribute_value_index product_attribute_value_index[]

  @@index([attribute_id], map: "FK_ATTRIBUTE_OPTION")
}

model cart {
  cart_id               Int            @id @default(autoincrement())
  uuid                  String         @unique(map: "CART_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sid                   String?        @db.VarChar
  currency              String         @db.VarChar
  customer_id           Int?
  customer_group_id     Int?           @db.SmallInt
  customer_email        String?        @db.VarChar
  customer_full_name    String?        @db.VarChar
  user_ip               String?        @db.VarChar
  status                Boolean        @default(false)
  coupon                String?        @db.VarChar
  shipping_fee_excl_tax Decimal?       @db.Decimal(12, 4)
  shipping_fee_incl_tax Decimal?       @db.Decimal(12, 4)
  discount_amount       Decimal?       @db.Decimal(12, 4)
  sub_total             Decimal        @db.Decimal(12, 4)
  total_qty             Int
  total_weight          Decimal?       @db.Decimal(12, 4)
  tax_amount            Decimal        @db.Decimal(12, 4)
  grand_total           Decimal        @db.Decimal(12, 4)
  shipping_method       String?        @db.VarChar
  shipping_method_name  String?        @db.VarChar
  shipping_zone_id      Int?
  shipping_address_id   Int?
  payment_method        String?        @db.VarChar
  payment_method_name   String?        @db.VarChar
  billing_address_id    Int?
  shipping_note         String?
  created_at            DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?      @default(now()) @db.Timestamptz(6)
  shipping_zone         shipping_zone? @relation(fields: [shipping_zone_id], references: [shipping_zone_id], onUpdate: NoAction)
  cart_item             cart_item[]

  @@index([shipping_zone_id], map: "FK_CART_SHIPPING_ZONE")
}

model cart_address {
  cart_address_id Int     @id @default(autoincrement())
  uuid            String  @unique(map: "CART_ADDRESS_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name       String? @db.VarChar
  postcode        String? @db.VarChar
  telephone       String? @db.VarChar
  country         String? @db.VarChar
  province        String? @db.VarChar
  city            String? @db.VarChar
  address_1       String? @db.VarChar
  address_2       String? @db.VarChar
}

model cart_item {
  cart_item_id           Int       @id @default(autoincrement())
  uuid                   String    @unique(map: "CART_ITEM_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cart_id                Int
  product_id             Int
  product_sku            String    @db.VarChar
  product_name           String
  thumbnail              String?   @db.VarChar
  product_weight         Decimal?  @db.Decimal(12, 4)
  product_price          Decimal   @db.Decimal(12, 4)
  product_price_incl_tax Decimal   @db.Decimal(12, 4)
  qty                    Int
  final_price            Decimal   @db.Decimal(12, 4)
  final_price_incl_tax   Decimal   @db.Decimal(12, 4)
  tax_percent            Decimal   @db.Decimal(12, 4)
  tax_amount             Decimal   @db.Decimal(12, 4)
  discount_amount        Decimal   @db.Decimal(12, 4)
  total                  Decimal   @db.Decimal(12, 4)
  variant_group_id       Int?
  variant_options        String?
  product_custom_options String?
  created_at             DateTime? @default(now()) @db.Timestamptz(6)
  updated_at             DateTime? @default(now()) @db.Timestamptz(6)
  cart                   cart      @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade)
  product                product   @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([cart_id], map: "FK_CART_ITEM")
  @@index([product_id], map: "FK_CART_ITEM_PRODUCT")
}

model category {
  category_id          Int                   @id @default(autoincrement())
  uuid                 String                @unique(map: "CATEGORY_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status               Boolean
  parent_id            Int?
  include_in_nav       Boolean
  position             Int?                  @db.SmallInt
  created_at           DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?             @default(now()) @db.Timestamptz(6)
  category_description category_description?
  product_category     product_category[]
}

model category_description {
  category_description_id          Int      @id @default(autoincrement())
  category_description_category_id Int      @unique(map: "CATEGORY_ID_UNIQUE")
  name                             String   @db.VarChar
  short_description                String?
  description                      String?
  image                            String?  @db.VarChar
  meta_title                       String?
  meta_keywords                    String?
  meta_description                 String?
  url_key                          String   @unique(map: "CATEGORY_URL_KEY_UNIQUE") @db.VarChar
  category                         category @relation(fields: [category_description_category_id], references: [category_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([category_description_category_id], map: "FK_CATEGORY_DESCRIPTION")
}

model cms_page {
  cms_page_id          Int                   @id @default(autoincrement())
  uuid                 String                @unique(map: "CMS_PAGE_UUID") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  layout               String                @db.VarChar
  status               Boolean?
  created_at           DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?             @default(now()) @db.Timestamptz(6)
  cms_page_description cms_page_description?
}

model cms_page_description {
  cms_page_description_id          Int       @id @default(autoincrement())
  cms_page_description_cms_page_id Int?      @unique(map: "PAGE_ID_UNIQUE")
  url_key                          String    @unique(map: "URL_KEY_UNIQUE") @db.VarChar
  name                             String    @db.VarChar
  content                          String?
  meta_title                       String?   @db.VarChar
  meta_keywords                    String?   @db.VarChar
  meta_description                 String?
  cms_page                         cms_page? @relation(fields: [cms_page_description_cms_page_id], references: [cms_page_id], onDelete: Cascade)

  @@index([cms_page_description_cms_page_id], map: "FK_CMS_PAGE_DESCRIPTION")
}

model collection {
  collection_id      Int                  @id @default(autoincrement())
  uuid               String               @unique(map: "COLLECTION_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String               @db.VarChar
  description        String?
  code               String               @unique(map: "COLLECTION_CODE_UNIQUE") @db.VarChar
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
  product_collection product_collection[]
}

model coupon {
  coupon_id                  Int       @id @default(autoincrement())
  uuid                       String    @unique(map: "COUPON_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status                     Boolean   @default(true)
  description                String    @db.VarChar
  discount_amount            Decimal   @db.Decimal(12, 4)
  free_shipping              Boolean   @default(false)
  discount_type              String    @default("1") @db.VarChar
  coupon                     String    @unique(map: "COUPON_UNIQUE") @db.VarChar
  used_time                  Int       @default(0)
  target_products            String?
  condition                  String?
  user_condition             String?
  buyx_gety                  String?
  max_uses_time_per_coupon   Int?
  max_uses_time_per_customer Int?
  start_date                 DateTime? @db.Timestamptz(6)
  end_date                   DateTime? @db.Timestamptz(6)
  created_at                 DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime? @default(now()) @db.Timestamptz(6)
}

model customer {
  customer_id      Int                @id @default(autoincrement())
  uuid             String             @unique(map: "CUSTOMER_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status           Int                @default(1) @db.SmallInt
  group_id         Int?               @default(1)
  email            String             @unique(map: "EMAIL_UNIQUE") @db.VarChar
  password         String             @db.VarChar
  full_name        String?            @db.VarChar
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
  customer_group   customer_group?    @relation(fields: [group_id], references: [customer_group_id], onUpdate: NoAction)
  customer_address customer_address[]

  @@index([group_id], map: "FK_CUSTOMER_GROUP")
}

model customer_address {
  customer_address_id Int       @id @default(autoincrement())
  uuid                String    @unique(map: "CUSTOMER_ADDRESS_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customer_id         Int
  full_name           String?   @db.VarChar
  telephone           String?   @db.VarChar
  address_1           String?   @db.VarChar
  address_2           String?   @db.VarChar
  postcode            String?   @db.VarChar
  city                String?   @db.VarChar
  province            String?   @db.VarChar
  country             String    @db.VarChar
  created_at          DateTime? @default(now()) @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @db.Timestamptz(6)
  is_default          Int?      @db.SmallInt
  customer            customer  @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([customer_id], map: "FK_CUSTOMER_ADDRESS")
}

model customer_group {
  customer_group_id Int        @id @default(autoincrement())
  uuid              String     @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  group_name        String     @db.VarChar
  created_at        DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?  @default(now()) @db.Timestamptz(6)
  customer          customer[]
}

model event {
  event_id   Int       @id @default(autoincrement())
  uuid       String    @unique(map: "EVENT_UUID") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar
  data       Json?     @db.Json
  created_at DateTime? @default(now()) @db.Timestamptz(6)
}

model migration {
  migration_id Int       @id @default(autoincrement())
  module       String    @unique(map: "MODULE_UNIQUE") @db.VarChar
  version      String    @db.VarChar
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
}

model order {
  order_id              Int                   @id @default(autoincrement())
  uuid                  String                @unique(map: "ORDER_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  integration_order_id  String?               @db.VarChar
  sid                   String?               @db.VarChar
  order_number          String                @unique(map: "ORDER_NUMBER_UNIQUE") @db.VarChar
  cart_id               Int
  currency              String                @db.VarChar
  customer_id           Int?
  customer_email        String?               @db.VarChar
  customer_full_name    String?               @db.VarChar
  user_ip               String?               @db.VarChar
  user_agent            String?               @db.VarChar
  coupon                String?               @db.VarChar
  shipping_fee_excl_tax Decimal?              @db.Decimal(12, 4)
  shipping_fee_incl_tax Decimal?              @db.Decimal(12, 4)
  discount_amount       Decimal?              @db.Decimal(12, 4)
  sub_total             Decimal               @db.Decimal(12, 4)
  total_qty             Int
  total_weight          Decimal?              @db.Decimal(12, 4)
  tax_amount            Decimal               @db.Decimal(12, 4)
  shipping_note         String?
  grand_total           Decimal               @db.Decimal(12, 4)
  shipping_method       String?               @db.VarChar
  shipping_method_name  String?               @db.VarChar
  shipping_address_id   Int?
  payment_method        String?               @db.VarChar
  payment_method_name   String?               @db.VarChar
  billing_address_id    Int?
  shipment_status       String                @default("0") @db.VarChar
  payment_status        String                @default("0") @db.VarChar
  created_at            DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?             @default(now()) @db.Timestamptz(6)
  order_activity        order_activity[]
  order_item            order_item[]
  payment_transaction   payment_transaction[]
  shipment              shipment[]
}

model order_activity {
  order_activity_id       Int       @id @default(autoincrement())
  uuid                    String    @unique(map: "ORDER_ACTIVITY_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_activity_order_id Int
  comment                 String
  customer_notified       Boolean   @default(false)
  created_at              DateTime? @default(now()) @db.Timestamptz(6)
  updated_at              DateTime? @default(now()) @db.Timestamptz(6)
  order                   order     @relation(fields: [order_activity_order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([order_activity_order_id], map: "FK_ORDER_ACTIVITY")
}

model order_address {
  order_address_id Int     @id @default(autoincrement())
  uuid             String  @unique(map: "ORDER_ADDRESS_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name        String? @db.VarChar
  postcode         String? @db.VarChar
  telephone        String? @db.VarChar
  country          String? @db.VarChar
  province         String? @db.VarChar
  city             String? @db.VarChar
  address_1        String? @db.VarChar
  address_2        String? @db.VarChar
}

model order_item {
  order_item_id          Int      @id @default(autoincrement())
  uuid                   String   @unique(map: "ORDER_ITEM_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_item_order_id    Int
  product_id             Int
  referer                Int?
  product_sku            String   @db.VarChar
  product_name           String
  thumbnail              String?  @db.VarChar
  product_weight         Decimal? @db.Decimal(12, 4)
  product_price          Decimal  @db.Decimal(12, 4)
  product_price_incl_tax Decimal  @db.Decimal(12, 4)
  qty                    Int
  final_price            Decimal  @db.Decimal(12, 4)
  final_price_incl_tax   Decimal  @db.Decimal(12, 4)
  tax_percent            Decimal  @db.Decimal(12, 4)
  tax_amount             Decimal  @db.Decimal(12, 4)
  discount_amount        Decimal  @db.Decimal(12, 4)
  total                  Decimal  @db.Decimal(12, 4)
  variant_group_id       Int?
  variant_options        String?
  product_custom_options String?
  requested_data         String?
  order                  order    @relation(fields: [order_item_order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([order_item_order_id], map: "FK_ORDER")
}

model payment_transaction {
  payment_transaction_id       Int       @id @default(autoincrement())
  uuid                         String    @unique(map: "PAYMENT_TRANSACTION_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  payment_transaction_order_id Int
  transaction_id               String?   @db.VarChar
  transaction_type             String    @db.VarChar
  amount                       Decimal   @db.Decimal(12, 4)
  parent_transaction_id        String?   @db.VarChar
  payment_action               String?   @db.VarChar
  additional_information       String?
  created_at                   DateTime? @default(now()) @db.Timestamptz(6)
  order                        order     @relation(fields: [payment_transaction_order_id], references: [order_id], onDelete: Cascade)

  @@unique([payment_transaction_order_id, transaction_id], map: "UNQ_PAYMENT_TRANSACTION_ID_ORDER_ID")
  @@index([payment_transaction_order_id], map: "FK_PAYMENT_TRANSACTION_ORDER")
}

model product {
  product_id                    Int                             @id @default(autoincrement())
  uuid                          String                          @unique(map: "PRODUCT_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                          String                          @default("simple") @db.VarChar
  variant_group_id              Int?
  visibility                    Boolean                         @default(true)
  group_id                      Int?                            @default(1)
  image                         String?                         @db.VarChar
  sku                           String                          @unique(map: "PRODUCT_SKU_UNIQUE") @db.VarChar
  price                         Decimal                         @db.Decimal(12, 4)
  qty                           Int
  weight                        Decimal?                        @db.Decimal(12, 4)
  manage_stock                  Boolean
  stock_availability            Boolean
  tax_class                     Int?                            @db.SmallInt
  status                        Boolean                         @default(false)
  created_at                    DateTime?                       @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime?                       @default(now()) @db.Timestamptz(6)
  attribute_group               attribute_group?                @relation(fields: [group_id], references: [attribute_group_id], onUpdate: NoAction)
  tax_class_productTotax_class  tax_class?                      @relation(fields: [tax_class], references: [tax_class_id], onUpdate: NoAction, map: "FK_TAX_CLASS")
  variant_group                 variant_group?                  @relation(fields: [variant_group_id], references: [variant_group_id], onUpdate: NoAction)
  cart_item                     cart_item[]
  product_attribute_value_index product_attribute_value_index[]
  product_category              product_category[]
  product_collection            product_collection[]
  product_custom_option         product_custom_option[]
  product_description           product_description?
  product_image                 product_image[]

  @@index([group_id], map: "FK_PRODUCT_ATTRIBUTE_GROUP")
  @@index([variant_group_id], map: "FK_PRODUCT_VARIANT_GROUP")
}

model product_attribute_value_index {
  product_attribute_value_index_id Int               @id @default(autoincrement())
  uuid                             String            @unique(map: "PRODUCT_ATTRIBUTE_VALUE_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id                       Int
  attribute_id                     Int
  option_id                        Int?
  option_text                      String?
  attribute                        attribute         @relation(fields: [attribute_id], references: [attribute_id], onDelete: Cascade, onUpdate: NoAction)
  attribute_option                 attribute_option? @relation(fields: [option_id], references: [attribute_option_id], onDelete: Cascade, onUpdate: NoAction)
  product                          product           @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([product_id, attribute_id, option_id], map: "OPTION_VALUE_UNIQUE")
  @@index([option_id], map: "FK_ATTRIBUTE_OPTION_VALUE_LINK")
  @@index([attribute_id], map: "FK_ATTRIBUTE_VALUE_LINK")
  @@index([product_id], map: "FK_PRODUCT_ATTRIBUTE_LINK")
}

model product_category {
  product_category_id Int      @id @default(autoincrement())
  category_id         Int
  product_id          Int
  category            category @relation(fields: [category_id], references: [category_id], onDelete: Cascade, onUpdate: NoAction)
  product             product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([category_id, product_id], map: "PRODUCT_CATEGORY_UNIQUE")
  @@index([category_id], map: "FK_CATEGORY_PRODUCT_LINK")
  @@index([product_id], map: "FK_PRODUCT_CATEGORY_LINK")
}

model product_collection {
  product_collection_id Int        @id @default(autoincrement())
  collection_id         Int
  product_id            Int
  collection            collection @relation(fields: [collection_id], references: [collection_id], onDelete: Cascade, onUpdate: NoAction)
  product               product    @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([collection_id, product_id], map: "PRODUCT_COLLECTION_UNIQUE")
  @@index([collection_id], map: "FK_COLLECTION_PRODUCT_LINK")
  @@index([product_id], map: "FK_PRODUCT_COLLECTION_LINK")
}

model product_custom_option {
  product_custom_option_id         Int                           @id @default(autoincrement())
  uuid                             String                        @unique(map: "PRODUCT_CUSTOM_OPTION_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_custom_option_product_id Int
  option_name                      String                        @db.VarChar
  option_type                      String                        @db.VarChar
  is_required                      Boolean                       @default(false)
  sort_order                       Int?
  product                          product                       @relation(fields: [product_custom_option_product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)
  product_custom_option_value      product_custom_option_value[]

  @@index([product_custom_option_product_id], map: "FK_PRODUCT_CUSTOM_OPTION")
}

model product_custom_option_value {
  product_custom_option_value_id Int                   @id @default(autoincrement())
  uuid                           String                @unique(map: "PRODUCT_CUSTOM_OPTION_VALUE_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  option_id                      Int
  extra_price                    Decimal?              @db.Decimal(12, 4)
  sort_order                     Int?
  value                          String                @db.VarChar
  product_custom_option          product_custom_option @relation(fields: [option_id], references: [product_custom_option_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([option_id], map: "FK_CUSTOM_OPTION_VALUE")
}

model product_description {
  product_description_id         Int     @id @default(autoincrement())
  product_description_product_id Int     @unique(map: "PRODUCT_ID_UNIQUE")
  name                           String  @db.VarChar
  description                    String?
  short_description              String?
  url_key                        String  @unique(map: "PRODUCT_URL_KEY_UNIQUE") @db.VarChar
  meta_title                     String?
  meta_description               String?
  meta_keywords                  String?
  product                        product @relation(fields: [product_description_product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([product_description_product_id], map: "FK_PRODUCT_DESCRIPTION")
}

model product_image {
  product_image_id         Int     @id @default(autoincrement())
  uuid                     String  @unique(map: "PRODUCT_IMAGE_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_image_product_id Int
  image                    String  @db.VarChar
  product                  product @relation(fields: [product_image_product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([product_image_product_id], map: "FK_PRODUCT_IMAGE_LINK")
}

model setting {
  setting_id Int     @id @default(autoincrement())
  uuid       String  @unique(map: "SETTING_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String  @unique(map: "SETTING_NAME_UNIQUE") @db.VarChar
  value      String?
  is_json    Boolean @default(false)
}

model shipment {
  shipment_id       Int       @id @default(autoincrement())
  uuid              String    @unique(map: "SHIPMENT_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shipment_order_id Int
  carrier_name      String?   @db.VarChar
  tracking_number   String?   @db.VarChar
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  order             order     @relation(fields: [shipment_order_id], references: [order_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([shipment_order_id], map: "FK_ORDER_SHIPMENT")
}

model shipping_method {
  shipping_method_id   Int                    @id @default(autoincrement())
  uuid                 String                 @unique(map: "SHIPPING_METHOD_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String                 @unique(map: "SHIPPING_METHOD_NAME_UNIQUE") @db.VarChar
  shipping_zone_method shipping_zone_method[]
}

model shipping_zone {
  shipping_zone_id       Int                      @id @default(autoincrement())
  uuid                   String                   @unique(map: "SHIPPING_ZONE_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String                   @db.VarChar
  country                String                   @db.VarChar
  cart                   cart[]
  shipping_zone_method   shipping_zone_method[]
  shipping_zone_province shipping_zone_province[]
}

model shipping_zone_method {
  shipping_zone_method_id Int             @id @default(autoincrement())
  method_id               Int
  zone_id                 Int
  is_enabled              Boolean         @default(true)
  cost                    Decimal?        @db.Decimal(12, 4)
  calculate_api           String?         @db.VarChar
  condition_type          String?         @db.VarChar
  max                     Decimal?        @db.Decimal(12, 4)
  min                     Decimal?        @db.Decimal(12, 4)
  shipping_method         shipping_method @relation(fields: [method_id], references: [shipping_method_id], onDelete: Cascade, onUpdate: NoAction)
  shipping_zone           shipping_zone   @relation(fields: [zone_id], references: [shipping_zone_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([zone_id, method_id], map: "METHOD_ZONE_UNIQUE")
  @@index([method_id], map: "FK_METHOD_ZONE")
  @@index([zone_id], map: "FK_ZONE_METHOD")
}

model shipping_zone_province {
  shipping_zone_province_id Int           @id @default(autoincrement())
  uuid                      String        @unique(map: "SHIPPING_ZONE_PROVINCE_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  zone_id                   Int
  province                  String        @unique(map: "SHIPPING_ZONE_PROVINCE_PROVINCE_UNIQUE") @db.VarChar
  shipping_zone             shipping_zone @relation(fields: [zone_id], references: [shipping_zone_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([zone_id], map: "FK_SHIPPING_ZONE_PROVINCE")
}

model tax_class {
  tax_class_id Int        @id @default(autoincrement())
  uuid         String     @unique(map: "TAX_CLASS_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String     @db.VarChar
  product      product[]
  tax_rate     tax_rate[]
}

model tax_rate {
  tax_rate_id  Int        @id @default(autoincrement())
  uuid         String     @unique(map: "TAX_RATE_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String     @db.VarChar
  tax_class_id Int?
  country      String     @default("*") @db.VarChar
  province     String     @default("*") @db.VarChar
  postcode     String     @default("*") @db.VarChar
  rate         Decimal    @db.Decimal(12, 4)
  is_compound  Boolean    @default(false)
  priority     Int
  tax_class    tax_class? @relation(fields: [tax_class_id], references: [tax_class_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_TAX_RATE_TAX_CLASS")

  @@unique([priority, tax_class_id], map: "TAX_RATE_PRIORITY_UNIQUE")
}

model user_token_secret {
  user_token_secret_id Int       @id @default(autoincrement())
  sid                  String    @unique(map: "USER_TOKEN_SID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id              String    @db.VarChar
  secret               String    @unique(map: "USER_TOKEN_SECRET_UNIQUE") @db.VarChar
  created_at           DateTime? @default(now()) @db.Timestamptz(6)
  updated_at           DateTime? @default(now()) @db.Timestamptz(6)
}

model variant_group {
  variant_group_id                                   Int             @id @default(autoincrement())
  uuid                                               String          @unique(map: "VARIANT_GROUP_UUID_UNIQUE") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  attribute_group_id                                 Int
  attribute_one                                      Int?
  attribute_two                                      Int?
  attribute_three                                    Int?
  attribute_four                                     Int?
  attribute_five                                     Int?
  visibility                                         Boolean         @default(false)
  attribute_attributeTovariant_group_attribute_five  attribute?      @relation("attributeTovariant_group_attribute_five", fields: [attribute_five], references: [attribute_id], onDelete: Cascade, onUpdate: NoAction)
  attribute_attributeTovariant_group_attribute_four  attribute?      @relation("attributeTovariant_group_attribute_four", fields: [attribute_four], references: [attribute_id], onDelete: Cascade, onUpdate: NoAction)
  attribute_group                                    attribute_group @relation(fields: [attribute_group_id], references: [attribute_group_id], onDelete: Cascade, onUpdate: NoAction)
  attribute_attributeTovariant_group_attribute_one   attribute?      @relation("attributeTovariant_group_attribute_one", fields: [attribute_one], references: [attribute_id], onDelete: Cascade, onUpdate: NoAction)
  attribute_attributeTovariant_group_attribute_three attribute?      @relation("attributeTovariant_group_attribute_three", fields: [attribute_three], references: [attribute_id], onDelete: Cascade, onUpdate: NoAction)
  attribute_attributeTovariant_group_attribute_two   attribute?      @relation("attributeTovariant_group_attribute_two", fields: [attribute_two], references: [attribute_id], onDelete: Cascade, onUpdate: NoAction)
  product                                            product[]

  @@index([attribute_group_id], map: "FK_ATTRIBUTE_GROUP_VARIANT")
  @@index([attribute_five], map: "FK_ATTRIBUTE_VARIANT_FIVE")
  @@index([attribute_four], map: "FK_ATTRIBUTE_VARIANT_FOUR")
  @@index([attribute_one], map: "FK_ATTRIBUTE_VARIANT_ONE")
  @@index([attribute_three], map: "FK_ATTRIBUTE_VARIANT_THREE")
  @@index([attribute_two], map: "FK_ATTRIBUTE_VARIANT_TWO")
}
